#include <stdio.h>
int waitingtime(int proc[], int n,
int burst_time[], int wait_time[]) {
 wait_time[0] = 0;
 for (int i = 1; i < n ; i++ )
 wait_time[i] = burst_time[i-1] + wait_time[i-1] ;
 return 0;
}
int turnaroundtime( int proc[], int n,
int burst_time[], int wait_time[], int tat[]) {
 int i;
 for ( i = 0; i < n ; i++)
 tat[i] = burst_time[i] + wait_time[i];
 return 0;
}
int avgtime( int proc[], int n, int burst_time[]) {
 int wait_time[n], tat[n], total_wt = 0, total_tat = 0;
 int i;
 waitingtime(proc, n, burst_time, wait_time);
 turnaroundtime(proc, n, burst_time, wait_time, tat);
 printf("Processes Burst Waiting Turn around \n");
 for ( i=0; i<n; i++) {
 total_wt = total_wt + wait_time[i];
 total_tat = total_tat + tat[i];
 printf(" %d\t %d\t\t %d \t%d\n", i+1, burst_time[i], wait_time[i], tat[i]);
 }
 printf("Average waiting time = %f\n", (float)total_wt / (float)n);
 printf("Average turn around time = %f\n", (float)total_tat / (float)n);
 return 0;
}
int main() {
 int proc[] = { 1, 2, 3,4};
 int n = sizeof proc / sizeof proc[0];
 int burst_time[] = {5, 8, 10,12};
 avgtime(proc, n, burst_time);
 return 0;
}
 56  
producers and consumers.cpp
@@ -0,0 +1,56 @@
#include <stdio.h>
#include <stdlib.h>
int mutex = 1;
int full = 0;
int empty = 3, x = 0;
void producer(){
--mutex;
++full;
--empty;
x++;
printf("\nProducer produces"
"item %d",
x);
++mutex;
}
void consumer(){
--mutex;
--full;
++empty;
printf("\nConsumer consumes "
"item %d",
x);
x--;
++mutex;
}
int main(){
int n, i;
printf("\n1. Press 1 for Producer"
"\n2. Press 2 for Consumer"
"\n3. Press 3 for Exit");
for (i = 1; i > 0; i++) {
printf("\nEnter your choice:");
scanf("%d", &n);
switch (n) {
case 1:
if ((mutex == 1)
&& (empty != 0)) {
producer();
}
else {
printf("Buffer is full!");
}
break;
case 2:
if ((mutex == 1)
&& (full != 0)) {
consumer();
}
else {
printf("Buffer is empty!");
}
break;
case 3:
exit(0);
break;
}}}
